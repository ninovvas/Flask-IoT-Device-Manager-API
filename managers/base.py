from werkzeug.exceptions import NotFound

from db import db
from models import RoleType


class BaseManager:

    @staticmethod
    def get_items(user, db_model):
        """
        Get all items of the specified database model that belong to the given user.

        :param user: User object representing the current user.
        :type user: UserModel
        :param db_model: The database model class to retrieve items from.
        :type db_model: Base
        :return: A list of items belonging to the user.
        :rtype: list
        """
        query = db.select(db_model)
        query = query.filter_by(user_id=user.id)
        return db.session.execute(query).scalars().all()

    @staticmethod
    def get_item(user, db_model, item_id, error_msg):
        """
        Get a specific item by ID from the specified database model.

        :param user: User object representing the current user.
        :type user: UserModel
        :param db_model: The database model class to retrieve the item from.
        :type db_model: Base
        :param item_id: The ID of the item to retrieve.
        :type item_id: int
        :param error_msg: Error message to display if the item is not found.
        :type error_msg: str
        :return: The item if it exists and belongs to the user.
        :rtype: Base
        :raises NotFound: If the item with the given ID does not exist.
        """

        query = db.select(db_model)
        item = db.session.execute(query.filter_by(id=item_id)).scalar()

        if not item:
            raise NotFound(f"{error_msg} with id {item_id} does not exist")

        if user.role.user == RoleType.user:
            query = query.filter_by(id=item_id, user_id=user.id)

        return db.session.execute(query).scalar()

    @staticmethod
    def create_item(db_model, data):
        """
        Create a new item in the database.

        :param db_model: The database model class to create an instance of.
        :type db_model: Base
        :param data: A dictionary containing the data for the new item. The keys should match the fields of the db_model.
        :type data: dict
        :return: The newly created item instance with its ID generated by the database.
        :rtype: Base
        """

        new_item = db_model(**data)
        db.session.add(new_item)
        db.session.flush()

    @staticmethod
    def update_item(user, db_model, item_id, data, error_msg):
        """
        Update an existing item in the database.

        :param user: User object representing the current user.
        :type user: UserModel
        :param db_model: The database model class to update an instance of.
        :type db_model: Base
        :param item_id: The ID of the item to update.
        :type item_id: int
        :param data: A dictionary containing the updated data for the item.
        :type data: dict
        :param error_msg: Error message to display if the item is not found.
        :type error_msg: str
        :raises NotFound: If the item with the given ID does not exist or does not belong to the user.
        """
        item = db.session.execute(
            db.select(db_model).filter_by(id=item_id, user_id=user.id)
        ).scalar()

        if not item:
            raise NotFound(f"{error_msg} with id {item} does not exist!")

        for key, value in data.items():
            setattr(item, key, value)

        db.session.flush()

    @staticmethod
    def delete_item(user, db_model, item_id, error_msg):
        """
        Delete an item from the database.

        :param user: User object representing the current user.
        :type user: UserModel
        :param db_model: The database model class to delete an instance of.
        :type db_model: Base
        :param item_id: The ID of the item to delete.
        :type item_id: int
        :param error_msg: Error message to display if the item is not found.
        :type error_msg: str
        :raises NotFound: If the item with the given ID does not exist or does not belong to the user.
        """
        item = db.session.execute(
            db.select(db_model).filter_by(id=item_id, user_id=user.id)
        ).scalar()
        if not item:
            raise NotFound(f"{error_msg} with id {item_id} does not exist")

        db.session.delete(item)
        db.session.flush()

    @staticmethod
    def check_item_exists(user, db_model, item_id):
        """
        Check if an item exists in the database for the given user.

        :param user: User object representing the current user.
        :type user: UserModel
        :param db_model: The database model class to check for the item's existence.
        :type db_model: Base
        :param item_id: The ID of the item to check.
        :type item_id: int
        :return: The item if it exists, otherwise None.
        :rtype: Base or None
        """
        item = db.session.execute(
            db.select(db_model).filter_by(id=item_id, user_id=user.id)
        ).scalar()
        return item
